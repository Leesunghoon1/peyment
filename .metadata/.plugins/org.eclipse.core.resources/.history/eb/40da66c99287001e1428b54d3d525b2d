package com.easyfestival.www.controller;

import java.io.IOException;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.easyfestival.www.peyment.OrderDTO;
import com.easyfestival.www.peyment.OrderService;
import com.easyfestival.www.peyment.PayDTO;
import com.easyfestival.www.peyment.PayService;
import com.siot.IamportRestClient.IamportClient;
import com.siot.IamportRestClient.exception.IamportResponseException;
import com.siot.IamportRestClient.response.IamportResponse;
import com.siot.IamportRestClient.response.Payment;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping(("/order/*"))
public class OrderController {

	private IamportClient api;
	
	@Autowired
	private PayService payService;
	
	
	@Autowired
	private OrderService orderService;
	
	public OrderController() {
    	// REST API 키와 REST API secret 를 아래처럼 순서대로 입력한다.
		this.api = new IamportClient("7820725586500628","8kJzA2A8JvcuCEVuWlXENjqli35CyLVev2gY4grQLmxfnj2DZvvqPZu4sDlrLLjjdmDpKaUiEkDEyCJM");
	}
	
	
	
	
	
	@RequestMapping(value ="complete", method = RequestMethod.POST)
	@ResponseBody
	public int paymentComplete(String imp_uid, String merchant_uid,String totalPrice,HttpSession session,@RequestBody OrderDTO orderDTO) throws Exception {
	    
	    String token = payService.getToken();
	    
	    // 결제 완료된 금액
	    String amount = payService.paymentInfo(orderDTO.getImp_uid(), token);
	    
	    System.out.println("확인"+orderDTO.getTotalPrice());
	    System.out.println("확인1 : " + orderDTO.getReserNum());
	    System.out.println(amount);
	    
	    int res = 1;
	    
	    if (orderDTO.getTotalPrice() != Long.parseLong(amount)) {
			res = 0;
			// 결제 취소
			payService.payMentCancle(token, orderDTO.getImp_uid(), amount,"결제 금액 오류");
			return res;
		}
	    System.out.println("check44 : " + orderDTO.getImp_uid());
		orderService.insert_pay(orderDTO);
		
		

		return res;
	 
	}
	
	
	@RequestMapping(value = "pay_info", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Long> payInfoPOST(Model model,HttpServletRequest request, HttpServletResponse response,
		        @RequestParam String imp_uid,HttpSession session) throws Exception {
			IamportResponse<Payment> result = api.paymentByImpUid(imp_uid);
			PayDTO payDTO = new PayDTO();
			payDTO.setNum((Long) session.getAttribute("saveNum"));
			payDTO.setOrderNum(Long.parseLong(result.getResponse().getMerchantUid()));
			payDTO.setPayMethod(result.getResponse().getPayMethod());
			payDTO.setPayName(result.getResponse().getName());
			payDTO.setPayAmount(result.getResponse().getAmount().longValue());
			orderService.insert_payinfo(payDTO);
			
			
			model.addAttribute("payDTO", payDTO);

			return new ResponseEntity<Long>(payDTO.getPayNum(), HttpStatus.OK);
	}
	
	
	
	
	
	
	
	
	
	

	@RequestMapping(value="/verifyIamport/{imp_uid}")
	@ResponseBody
	public IamportResponse<Payment> paymentByImpUid(
			Model model
			, Locale locale
			, HttpSession session
			, @PathVariable(value= "imp_uid") String imp_uid) throws IamportResponseException, IOException
	{	
			return api.paymentByImpUid(imp_uid);
	}
	
	
	
	
	
}

