function parsePayDTO(payDTOString) {
  const regex = /payNum=(\d+),\s*num=([^,]+),\s*orderNum=(\d+),\s*payMethod=([^,]+),\s*payName=([^,]+),\s*payDate=([^,]+),\s*payAmount=(\d+)/;

  const matches = payDTOString.match(regex);

  if (matches) {
      const payDTO = {
          payNum: parseInt(matches[1]),
          num: matches[2],
          orderNum: parseInt(matches[3]),
          payMethod: matches[4],
          payName: matches[5],
          payDate: matches[6],
          payAmount: parseInt(matches[7])
      };

      return payDTO;
  } else {
      console.log("문자열 형식이 올바르지 않습니다.");
      return null;
  }
}

const payDTOString = "PayDTO(payNum=29, num=null, orderNum=202311273225647515, payMethod=point, payName=일본, payDate=null, payAmount=3770)";
const payDTO = parsePayDTO(payDTOString);

console.log(orderNum);


document.addEventListener("DOMContentLoaded", function () {
  // payMentCancel 클래스를 가진 모든 요소를 찾아 payMentCancelButtons에 할당합니다.
  const payMentCancelButtons = document.querySelectorAll('.payMentCancel');

  // payMentCancelButtons에 대한 forEach 루프를 사용하여 각각에 이벤트 리스너를 추가합니다.
  payMentCancelButtons.forEach(function(button) {
      button.addEventListener("click", function () {
          console.log(orderNum.value);

          const userConfirmed = confirm("주문을 취소하시겠습니까?\n취소하면 되돌릴 수 없습니다.!");

          if (userConfirmed) {
              alert("주문을 취소하였습니다!");
              const xhttp = new XMLHttpRequest();

              xhttp.open("POST", "/order/orderCancle");

              xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

              xhttp.send("orderNum=" + orderNum.value);

              xhttp.onreadystatechange = function () {
                  if (this.readyState == 4 && this.status == 200) {
                      let result1 = xhttp.responseText.trim();
                      console.log(result1);

                      if (result1 == 1) {
                          location.replace('/package/list');
                      } else {
                          alert("이미 취소된 주문이거나 없는 주문번호입니다.");
                      }
                  }
              }
          } else {
              alert("보류하였습니다!");
          }
      });
  });
});


function cancelPay(){
		
		
        const xhttp = new XMLHttpRequest;

        xhttp.open("POST","../admin/orderCancle")

        
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");


        xhttp.send("orderNum="+orderNum);

        xhttp.onreadystatechange=function(){
            if(this.readyState==4 && this.status==200){
               let result1 = xhttp.responseText.trim();
               console.log(result1);
                   if(result1==1){
                       console.log("삭제성공")
               
                   } else{
                       console.log("삭제실패");
                   }
            } 
        }
 }